# Copyright 2015 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

standard_testfile ".f90"

if { [prepare_for_testing ${testfile}.exp ${testfile} ${srcfile} \
     {debug f90 quiet}] } {
    return -1
}

if ![runto MAIN__] then {
    perror "couldn't run to breakpoint MAIN__"
    continue
}


# Run to the point all bounds were calculated and assigned.

gdb_breakpoint [gdb_get_line_number "all-assigned"]

gdb_continue_to_breakpoint "all-assigned"

#
# UBOUND tests.
#

gdb_test "print ubound (ivla1d)" "\\\(7\\\)" \
  "print ubound for one dimension"

gdb_test "print ubound (ivla2d)" ".*\\\(7, 300\\\).*" \
  "print ubound for two dimension"

gdb_test "print ubound (ivla3d)" ".*\\\(7, 8, 9\\\).*" \
  "print ubound for three dimension"

gdb_test "print ubound (ivla2d, 2)" "300" \
  "print ubound for three dimension but second one only"

gdb_test "print ubound (ivla2d, 2, 1)" "44" \
  "print ubound for three dimension but second one only with one byte precision"

gdb_test "print ibound2k8" "44" \
 "print ubound of ivla2d first dimension sanity (ivla2d, 2, 1)"

gdb_test "print ubound (ivla3d, 1)" "7" \
  "print ubound for three dimension but first one only"

gdb_test "print ubound (ivla3d, 2)" "8" \
  "print ubound for three dimension but second one only"

gdb_test "print ubound (ivla3d, 3)" "9" \
  "print ubound for three dimension but second one only"

gdb_test "print ubound (ivla2d, 5, 1)" ".*Argument 2 exceeds array's dimension.*" \
  "error checking argument excedes array's dimension for 2d"

gdb_test "print ubound (ivla2d, 1, 3)" ".*Wrong kind: accepted kind is 1, 2, 4 or 8.*" \
  "error checking 3 argument not valid precision"

gdb_test "print ubound (ivla1d2bytes, 1, 2)" "-32766" \
  "error ubound checking 3 argument not valid precision"

gdb_test "print UBOUND (ivla1d)" "\\\(7\\\)" \
  "print capital ubound for one dimension"

#
# LBOUND tests.
#

gdb_test "print lbound (ivla1d)" "\\\(6\\\)" \
  "print lbound for one dimension"

gdb_test "print lbound (ivla2d)" ".*\\\(6, 298\\\).*" \
  "print lbound for two dimension"

gdb_test "print lbound (ivla3d)" ".*\\\(1, 5, 4\\\).*" \
  "print lbound for three dimension"

gdb_test "print lbound (ivla2d, 2)" "298" \
  "print lbound for three dimension but second one only"

gdb_test "print lbound (ivla2d, 2, 1)" "42" \
  "print lbound for three dimension but second one only with one byte precision"

gdb_test "print lbound (ivla3d, 1)" "1" \
 "print lbound for three dimension but first one only"

gdb_test "print lbound (ivla3d, 2)" "5" \
  "print lbound for three dimension but second one only"

gdb_test "print lbound (ivla3d, 3)" "4" \
  "print lbound for three dimension but second one only"

gdb_test "print lbound (ivla2d, 5, 1)" ".*Argument 2 exceeds array's dimension.*" \
   "error checking argument excedes array's dimension for 2d"

gdb_test "print lbound (ivla2d, 1, 3)" ".*Wrong kind: accepted kind is 1, 2, 4 or 8.*" \
   "error checking 3 argument not valid precision"

gdb_test "print lbound (ivla1d2bytes, 1, 2)" "-32768" \
   "error lbound checking 3 argument not valid precision"

gdb_test "print LBOUND (ivla1d)" "\\\(6\\\)" \
  "print capital lbound for one dimension"

#
# SIZE tests.
#

gdb_test "print size (ivla1d)" "\\\(2\\\)" \
  "print size for one dimension"

gdb_test "print size (ivla2d)" ".*\\\(2, 3\\\).*" \
  "print size for two dimension"

gdb_test "print size (ivla3d)" ".*\\\(7, 4, 6\\\).*" \
  "print size for three dimension"

gdb_test "print size (ivla2d, 2)" "3" \
  "print size for three dimension but second one only"

gdb_test "print size (ivla2d, 2, 1)" "3" \
  "print size for three dimension but second one only with one byte precision"

gdb_test "print size (ivla3d, 1)" "7" \
  "print size for three dimension but first one only"

gdb_test "print size (ivla3d, 2)" "4" \
  "print size for three dimension but second one only"

gdb_test "print size (ivla3d, 3)" "6" \
  "print size for three dimension but second one only"

gdb_test "print size (ivla2d, 5, 1)" ".*Argument 2 exceeds array's dimension.*" \
  "error checking argument excedes array's dimension for 2d"

gdb_test "print size (ivla2d, 1, 3)" ".*Wrong kind: accepted kind is 1, 2, 4 or 8.*" \
  "error checking 3 argument not valid precision"

gdb_test "print size (ivla1d)" "\\\(2\\\)" \
  "print capital size for one dimension"

#
#  RANK tests
#

gdb_test "print rank (ivla1d)" "1" \
  "print rank for one dimension"

gdb_test "print rank (ivla2d)" "2" \
  "print rank for two dimension"

gdb_test "print rank (ivla3d)" "3" \
  "print rank for three dimension"

gdb_test "print RANK (ivla7d)" "7" \
  "print rank for seven dimension"