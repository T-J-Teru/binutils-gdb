# Copyright 2005, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This file was written by Wu Zhou. (woodzltc@cn.ibm.com)

# This file is part of the gdb testsuite.  It contains tests for type-printing
# and value-printing Fortran derived types.

if $tracelevel then {
	strace $tracelevel
}

if { [skip_fortran_tests] } { return -1 }

set testfile "deriv-alloc"
set srcfile ${testfile}.f90
set binfile ${objdir}/${subdir}/${testfile}

if {[gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}" \
	 executable {debug f77}] != ""} {
    return -1
}

gdb_exit
gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile}

if ![runto MAIN__] then {
    perror "couldn't run to breakpoint MAIN__"
    continue
}

# Depending on the compiler version being used, the name of the 4-byte integer
# and real types can be printed differently.  For instance, gfortran-4.1 uses
# "int4" whereas gfortran-4.3 uses "int(kind=4)".
set int4 "(int4|integer\\(kind=4\\)|INTEGER\\(4\\))"
set real4 "(real4|real\\(kind=4\\)|REAL\\(4\\))"
set bartype "type = Type bar\r\n *${int4} :: c\r\n *${real4} :: d\r\n *${int4} :: x\\(3,5\\)\r\n *${int4} :: y\\((\\*|\\d+),(\\*|\\d+)\\)\r\n*End Type bar"

if ![runto [gdb_get_line_number "starting break"] ] then {
    perror "couldn't run to breakpoint "
    continue
}

set initialvalue " = \\( c = 0, d = 0, x = \\(\\( 0, 0, 0\\) \\( 0, 0, 0\\) \\( 0, 0, 0\\) \\( 0, 0, 0\\) \\( 0, 0, 0\\) \\), y = <not allocated> \\)"
set allocedvalue " = \\( c = 0, d = 0, x = \\(\\( 0, 0, 0\\) \\( 0, 0, 0\\) \\( 0, 0, 0\\) \\( 0, 0, 0\\) \\( 0, 0, 0\\) \\), y = \\(\\( 0, 0, 0\\) \\( 0, 0, 0\\) \\( 0, 0, 0\\) \\( 0, 0, 0\\) \\( 0, 0, 0\\) \\) \\)"
set wrapallocedvalue " = \\(\\( c = 0, d = 0, x = \\(\\( 0, 0, 0\\) \\( 0, 0, 0\\) \\( 0, 0, 0\\) \\( 0, 0, 0\\) \\( 0, 0, 0\\) \\), y = \\(\\( 0, 0, 0\\) \\( 0, 0, 0\\) \\( 0, 0, 0\\) \\( 0, 0, 0\\) \\( 0, 0, 0\\) \\) \\)\\)"

gdb_test "ptype p" $bartype

gdb_test "print p" $initialvalue

gdb_test "print q" " = <not allocated>"

if ![runto [gdb_get_line_number "alloc q base"] ] then {
    perror "couldn't run to breakpoint "
    continue
}

gdb_test "ptype q" "${bartype} \\(1\\)"

gdb_test "print q(1)" "${initialvalue}"

if ![runto [gdb_get_line_number "alloc q y content"] ] then {
    perror "couldn't run to breakpoint "
    continue
}

gdb_test "print q" "${wrapallocedvalue}"
# should have real alloced contents at this point
gdb_test "print q(1)" "${allocedvalue}"
gdb_test "print p%y" " = <not allocated>"
gdb_test "print q(1)%y" " = \\(\\( 0, 0, 0\\) \\( 0, 0, 0\\) \\( 0, 0, 0\\) \\( 0, 0, 0\\) \\( 0, 0, 0\\) \\)"

if ![runto [gdb_get_line_number "alloc p y content"] ] then {
    perror "couldn't run to breakpoint "
    continue
}

gdb_test "print p%y" " = \\(\\( 0, 0, 0\\) \\( 0, 0, 0\\) \\( 0, 0, 0\\) \\( 0, 0, 0\\) \\( 0, 0, 0\\) \\)"

if ![runto [gdb_get_line_number "A great place to stop"] ] then {
    perror "couldn't run to breakpoint "
    continue
}

gdb_test "print p%y(1,1)" " = 6"
gdb_test "print q(1)%y(1,1)" " = 6"

gdb_test "print p%y(3,2)" " = 17"
gdb_test "print q(1)%y(3,2)" " = 17"
