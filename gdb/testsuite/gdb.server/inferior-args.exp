# Copyright 2023 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Test passing inferior arguments on the gdbserver command line.  Tests the
# flags --no-startup-with-shell and --no-escape-args that change how GDB
# interprets the arguments being passed.

# This test relies on starting gdbserver using the pipe syntax.  Not sure
# how well this will run if part of this test is being run elsewhere.
require {!is_remote target} {!is_remote host}

load_lib gdbserver-support.exp

standard_testfile

require allow_gdbserver_tests

set gdbserver [find_gdbserver]
if { $gdbserver == "" } {
    unsupported "could not find gdbserver"
    return
}

standard_testfile
if {[build_executable "failed to prepare" $testfile $srcfile]} {
    return -1
}

# EXTENDED_P is a boolean, when true gdbserver is started with --multi, and
# GDB connects using extended-remote protocol.  Otherwise, no --multi flag
# is passed, and GDB connects with the remote protocol.
#
# WITH_SHELL_P is a boolean, when true gdbserver starts the inferior using a
# shell, when false gdbserver is passed the --no-startup-with-shell command
# line option, and should not start the inferior through a shell.
#
# ESCAPE_P is a boolean, when true gdbserver applies escapes to the inferior
# arguments, when false gdbserver is passed the --no-escape-args command
# line option, and should not apply escaping to the inferior arguments.
#
# ARGLIST is a list of inferior arguments to add to the gdbserver command
# line.
#
# RE_LIST is a list of patterns to match, one for each of ARGLIST.  Once the
# inferior is started we check that each argument matches its corresponding
# entry in RE_LIST.
proc do_test_inner { extended_p with_shell_p escape_p arglist re_list } {

    clean_restart ${::binfile}

    gdb_test_no_output "set sysroot"

    # Make sure we're disconnected, in case we're testing with an
    # extended-remote board, therefore already connected.
    gdb_test "disconnect" ".*"

    if { $extended_p } {
	set protocol "extended-remote"
    } else {
	set protocol "remote"
    }

    if { $escape_p } {
	set esc_opt ""
    } else {
	set esc_opt "--no-escape-args"
    }

    if { $with_shell_p } {
	set shell_opt ""
    } else {
	set shell_opt "--no-startup-with-shell"
    }

    gdb_test "target ${protocol} | ${::gdbserver} --once ${esc_opt} ${shell_opt} - ${::binfile} ${arglist}" \
	".*" \
	"start gdbserver over stdin"

    gdb_breakpoint main
    gdb_continue_to_breakpoint main

    set expected_len [expr 1 + [llength $re_list]]
    gdb_test "print argc" \
	"\\\$$::decimal = $expected_len" "check argc"

    set i 1
    foreach arg $re_list {
	verbose -log "APB ($arg)"
	gdb_test "print argv\[$i\]" \
	    "\\\$$::decimal = $::hex \"$arg\"" \
	    "check argv\[$i\]"
	set i [expr $i + 1]
    }
}

# Wrapper around do_test_inner.  NAME is the name of this test, used to make
# the test names unique.  ARGLIST is the list of inferior arguments to add
# to the gdbserver command line.
#
# The optional RE_ESC_LIST is a list of patterns to match against the
# inferior arguments once the inferior is started, one pattern for each
# argument.  If RE_ESC_LIST is not given then ARGLIST is reused, which
# implies the arguments appear unmodified in the test output.
#
# The optional RE_NO_ESC_LIST is a list of patterns ot match against the
# inferior arguments when gdbserver is started with --no-escape-args or
# --no-startup-with-shell.  There should be one pattern for each argument.
# If RE_NO_ESC_LIST is not given then RE_ESC_LIST is resused, which implies
# there's no difference in how the arguments are printed.
proc args_test { name arglist {re_esc_list {}} {re_no_esc_list {}} } {
    if {[llength $re_esc_list] == 0} {
	set re_esc_list $arglist
    }

    if {[llength $re_no_esc_list] == 0} {
	set re_no_esc_list $re_esc_list
    }

    foreach_with_prefix extended_p { yes no } {
	foreach_with_prefix startup_with_shell { on off } {
	    foreach_with_prefix escape_p { yes no } {
		if { $escape_p || !$startup_with_shell } {
		    set re_list $re_esc_list
		} else {
		    set re_list $re_no_esc_list
		}

		with_test_prefix "$name" {
		    do_test_inner $extended_p $startup_with_shell \
			$escape_p $arglist $re_list
		}
	    }
	}
    }
}

args_test "basic" {a b c}
args_test "one empty" {1 "" 3}
args_test "two empty" {1 "" "" 3}
args_test "one with single quotes" {1 "''" 3}
args_test "lone double quote" {"1" \" 3} {1 \\\\\" 3}
save_vars { env(TEST) } {
    set env(TEST) "ABCD"
    args_test "shell variable" {\$TEST} {\\$TEST} {ABCD}
}
