# This testcase is part of GDB, the GNU debugger.

# Copyright 2017-2023 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This test doesn't make sense on native-gdbserver.
require !use_gdb_stub

# There's no easy way to set environment variables on remote targets
# (via dejagnu) yet.
require {!is_remote target}

standard_testfile

if { [build_executable "failed to prepare" $testfile $srcfile debug] } {
    return -1
}

set unique_file [standard_output_file "unique-file.unique-extension"]
set unique_file_dir [standard_output_file ""]

run_on_host \
    "touch OUTPUT_DIR/unique-file.unique-extension" \
    "touch" "$unique_file"

# Initial setup for simple test (wildcard expansion, variable substitution).

proc initial_setup_simple { startup_with_shell run_args } {
    global hex decimal binfile unique_file

    clean_restart $binfile

    gdb_test_no_output "set startup-with-shell $startup_with_shell"

    ##gdb_test_no_output "set args $run_args" \
	##	"set args \$run_args"

    gdb_test "set args $run_args" ".*"\
	"set args \$run_args"

    return [runto_main]
}

# Some of these tests will not work when using the remote protocol due
# to bug PR gdb/28392.
if {[target_info gdb_protocol] == "remote"
    || [target_info gdb_protocol] == "extended-remote"} {
    set using_remote_protocol true
} else {
    set using_remote_protocol false
}

proc run_test { args on_re off_re testname } {
    foreach startup_with_shell { "on" "off" } {
	with_test_prefix "$testname, startup_with_shell: ${startup_with_shell}" {
	    if {![initial_setup_simple $startup_with_shell $args]} {
		return -1
	    }

	    if { $startup_with_shell } {
		set re $on_re
	    } else {
		set re $off_re
	    }

	    gdb_test "print argv\[1\]" "\\\$$::decimal = $re" $testname
	}
    }
}


## Run the actual tests

run_test "$unique_file_dir/*.unique-extension" \
    "$hex \"$unique_file\"" \
    "$hex \"$unique_file_dir/\\\*\.unique-extension\"" \
    "arg is glob"

run_test "$unique_file_dir/\\*.unique-extension" \
    "$hex \"$unique_file_dir/\\\*\.unique-extension\"" \
    "$hex \"$unique_file_dir/\\\*\.unique-extension\"" \
    "arg is escaped glob"

save_vars { env(TEST) } {
    set env(TEST) "1234"
    run_test "\$TEST" \
	"$hex \"1234\"" \
	"$hex \"\\\$TEST\"" \
	"arg is shell variable"

    run_test "\\\$TEST" \
	"$hex \"\\\$TEST\"" \
	"$hex \"\\\$TEST\"" \
	"arg is escaped shell variable"

}
