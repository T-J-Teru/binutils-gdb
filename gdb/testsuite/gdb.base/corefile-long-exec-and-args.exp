# Copyright 2024 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Check GDB can handle reading the full executable name and argument
# list from a core file.
#
# Currently, only Linux supports reading full executable and arguments
# from a core file.
require {istarget *-linux*}

standard_testfile

if {[build_executable $testfile.exp $testfile $srcfile] == -1} {
    untested "failed to compile"
    return -1
}

# Linux core files can encore upto 80 characters for the command and
# arguments in the psinfo.  If BINFILE is less than 80 characters in
# length then lets try to make it longer.
set binfile_len [string length $binfile]
if { $binfile_len <= 80 } {
    set extra_len [expr 80 - $binfile_len + 1]
    set extra_str [string repeat "x" $extra_len]
    set new_binfile $binfile$extra_str
    remote_exec build "mv $binfile $new_binfile"
    set binfile $new_binfile
}

# Generate a core file, this time the inferior has no additional
# arguments.
set corefile [core_find $binfile {}]
if {$corefile == ""} {
    untested "unable to create corefile"
    return 0
}
set corefile_1 "$binfile.1.core"
remote_exec build "mv $corefile $corefile_1"

# Load the core file and confirm that the full executable name is
# seen.
clean_restart $binfile
set saw_generated_line false
gdb_test_multiple "core-file $corefile_1" "load core file no args" {
    -re "^Core was generated by `[string_to_regexp $binfile]'\\.\r\n" {
	set saw_generated_line true
	exp_continue
    }

    -re "^$gdb_prompt $" {
	gdb_assert { $saw_generated_line } $gdb_test_name
    }

    -re "^\[^\r\n\]*\r\n" {
	exp_continue
    }
}

# Generate a core file, this time pass some arguments to the inferior.
set args "aaaaa bbbbb ccccc ddddd eeeee"
set corefile [core_find $binfile {} $args]
if {$corefile == ""} {
    untested "unable to create corefile"
    return 0
}
set corefile_2 "$binfile.2.core"
remote_exec build "mv $corefile $corefile_2"

# Load the core file and confirm that the full executable name is
# seen.
clean_restart $binfile
set saw_generated_line false
gdb_test_multiple "core-file $corefile_2" "load core file with args" {
    -re "^Core was generated by `[string_to_regexp $binfile] $args'\\.\r\n" {
	set saw_generated_line true
	exp_continue
    }

    -re "^$gdb_prompt $" {
	gdb_assert { $saw_generated_line } $gdb_test_name
    }

    -re "^\[^\r\n\]*\r\n" {
	exp_continue
    }
}
