# Copyright 2003-2024 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This is a test for the gdb invocation option --args.

# Skip test if target does not support argument passing.
require {!target_info exists noargs}

# This test requires starting new inferior processes, skip it if the target
# board is a stub.
require !use_gdb_stub

standard_testfile

if {[build_executable $testfile.exp $testfile $srcfile] == -1} {
    untested "failed to compile"
    return -1
}

# NAME is the name to use for the tests and ARGLIST is the list of
# arguments that are passed to GDB when it is started.
#
# The optional RE_ESC_LIST is the list of patterns to check the
# inferior arguments against when GDB is started using --args.  If
# RE_ESC_LIST is not given then ARGLIST is reused, this implies that
# the inferior arguments appear unchanged in the test output.
#
# The optional RE_NO_ESC_LIST is the list of patterns to check the
# inferior arguments against when GDB is started using
# --no-escape-args.  If RE_NO_ESC_LIST is not given then RE_ESC_LIST
# is reused, this implies that there's no difference between the test
# output when the arguments are escaped or not.

proc args_test { name arglist {re_esc_list {}} {re_no_esc_list {}} } {

    # If either of the two regexp lists are not specificed then we can
    # use an earlier argument value instead.
    #
    # For the first regexp list, if this is missing then we use the
    # argument list, this assumes that the arguments will appear
    # unmodified in the output.
    if {[llength $re_esc_list] == 0} {
	set re_esc_list $arglist
    }

    # If the second regexp list is missing then we reuse the first
    # regexp list.  This assumes there's no difference between escaped
    # and unescaped arguments in the output.
    if {[llength $re_no_esc_list] == 0} {
	set re_no_esc_list $re_esc_list
    }

    foreach_with_prefix startup_with_shell { on off } {
	foreach_with_prefix arg_flag { args no-escape-args } {
	    save_vars { ::GDBFLAGS } {
		set ::GDBFLAGS "$::GDBFLAGS --${arg_flag} $::binfile $arglist"

		clean_restart $::binfile

		gdb_test_no_output \
		    "set startup-with-shell ${startup_with_shell}" \
		    "set startup-with-shell for $name"

		runto_main
		gdb_breakpoint [gdb_get_line_number "set breakpoint here"]
		gdb_continue_to_breakpoint "breakpoint for $name"

		if { $arg_flag eq "args" || $startup_with_shell eq "off" } {
		    set re_list $re_esc_list
		} else {
		    set re_list $re_no_esc_list
		}

		set expected_len [expr 1 + [llength $re_list]]
		gdb_test "print argc" \
		    "\\\$$::decimal = $expected_len" "argc for $name"

		set i 1
		foreach arg $re_list {
		    if { $arg eq "\n" } {
			set arg {\\n}
		    } elseif { $arg eq "\"" } {
			set arg {\\\"}
		    }

		    gdb_test "print argv\[$i\]" \
			"\\\$$::decimal = $::hex \"$arg\"" \
			"argv\[$i\] for $name"
		    set i [expr $i + 1]
		}
	    }
	}
    }
}

# Run all the tests.
proc run_all_tests {} {
    # Test that the --args are processed correctly.

    args_test basic {{1} {3}}

    # Test that the --args are processed correctly even if one of them is
    # empty.

    args_test "one empty" {{1} {} {3}}

    # Try with 2 empty args.

    args_test "two empty" {{1} {} {} 3}

    # Try with arguments containing literal single quotes.

    args_test "one empty with single quotes" {{1} {''} {3}}

    args_test "two empty with single quotes" {{1} {''} {''} {3}}

    # Try with arguments containing literal newlines.

    args_test "one newline" {{1} "\n" {3}} {1 \\\\n 3}

    args_test "two newlines" {{1} "\n" "\n" {3}} {1 \\\\n \\\\n 3}

    args_test "lone single quote" {{1} \' {3}}

    args_test "lone double quote" {{1} \" {3}} {1 \\\\\" 3}

    save_vars { ::env(TEST) } {
	set ::env(TEST) "ABCD"
	args_test "shell variable" {{$TEST}} {\\$TEST} {{ABCD}}
    }
}

run_all_tests

# For extended-remote targets, disable the packet which passes
# inferior arguments as a single string.  This changes how the vRun
# (extended-remote only) packet works.
if {[target_info gdb_protocol] == "extended-remote"} {
    with_test_prefix "single-inferior-arg disabled" {
	save_vars { GDBFLAGS } {
	    append GDBFLAGS " -ex \"set remote single-inferior-argument-feature-packet off\""
	    run_all_tests
	}
    }
}
