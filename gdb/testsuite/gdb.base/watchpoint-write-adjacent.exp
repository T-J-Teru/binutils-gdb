# Copyright 2025 Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# The inferior has two adjacent variables.  We a 'watch' on one field,
# and an 'rwatch' on the other.  Running the inferior writes to both
# fields.  Check GDB reports the expected 'watch' watchpoint.
#
# Multiple inferiors are compiled, using a variety of types for the
# two fields.

require allow_hw_watchpoint_tests

standard_testfile

# Start BINFILE, then set a watch and rwatch watchpoint on WATCH_VAR
# and RWATCH_VAR respectively.  Continue the inferior and expect to
# see GDB stop due to WATCH_VAR being written too.
proc run_test { binfile watch_var rwatch_var var_type } {
    clean_restart $binfile

    if { ![runto_main] } {
	return
    }

    gdb_test "watch obj.$watch_var" \
	"Hardware watchpoint $::decimal: obj.$watch_var"
    set wp_num [get_integer_valueof "\$bpnum" "*UNKNOWN*"]
    gdb_test "rwatch obj.$rwatch_var" \
	"Hardware read watchpoint $::decimal: obj.$rwatch_var"

    if { $watch_var eq "a" } {
	set new_val 1
    } else {
	set new_val 2
    }

    if { $var_type eq "char" } {
	set suffix " '\[^'\]+'"
    } else {
	set suffix ""
    }

    gdb_test "continue" \
	[multi_line \
	     "Hardware watchpoint $wp_num: obj.$watch_var" \
	     "" \
	     "Old value = 0${suffix}" \
	     "New value = ${new_val}${suffix}" \
	     ".*"]

}

# Build a binary using VAR_TYPE as the test variable type.  Then Call
# run_test twice.
proc build_and_run_test { var_type } {
    set filename ${::testfile}-${var_type}
    set binfile [standard_output_file $filename]

    set flags [list debug additional_flags=-DVAR_TYPE=${var_type}]
    if {[build_executable "failed to build" $filename $::srcfile $flags]} {
	return
    }

    foreach test { {a b} {b a} } {
	set watch_var [lindex $test 0]
	set rwatch_var [lindex $test 1]

	with_test_prefix "watch: ${watch_var}, rwatch: ${rwatch_var}" {
	    run_test $binfile $watch_var $rwatch_var $var_type
	}
    }
}

# Run the test with a series of different types.
foreach_with_prefix var_type { type_ll int short char float double } {
    build_and_run_test $var_type
}
