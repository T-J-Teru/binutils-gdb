# Copyright 2019-2024 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Based on break.exp, written by Rob Savoye. (rob@cygnus.com)
# Modified to test gdb's handling of separate debug info files.
# Modified to test gdb's handling of a debug-id retrieval.

# Build-id-related tests for core files.

standard_testfile

# Build a non-shared executable.  SUBDIR is the name of a directory within
# the standard output directory into which the executable should be moved
# after being built.  EXTRA_OPTS are added to the build options for building
# the executable.

proc build_corefile_buildid_exec { execdir extra_opts } {
    global testfile srcfile

    set opts { debug }
    append opts $extra_opts

    if {[build_executable $testfile.exp $testfile $srcfile $opts] == -1} {
	untested "failed to compile"
	return false
    }

    # Move executable to non-default path.
    set builddir [standard_output_file $execdir]
    set binfile [standard_output_file $testfile]
    remote_exec build "rm -rf $builddir"
    remote_exec build "mkdir $builddir"
    remote_exec build "mv $binfile [file join $builddir [file tail $binfile]]"

    return true
}

# Build a shared executable.  EXECDIR is the name of a directory within the
# standard output directory into which the executable should be moved after
# being built.  EXTRA_OPTS are added to the build options for building the
# executable.

proc build_corefile_buildid_shared { execdir extra_opts } {
    global testfile srcfile

    set builddir [standard_output_file $execdir]

    # Compile DSO.
    set dso_basename ${testfile}-shlib-shr
    set objdso [standard_output_file $dso_basename.so]
    if {[build_executable "build [file tail $objdso]" $objdso \
	     "$dso_basename.c" {debug shlib}] == -1} {
	untested "failed to compile $dso_basename.so"
	return false
    }

    # Compile shared library.
    set srclib $testfile-shlib.c
    set libname lib$testfile.so
    set objlib [standard_output_file $libname]
    set dlopen_lib [shlib_target_file \
			[file join $builddir [file tail $objdso]]]
    set opts [list debug shlib shlib_load \
		  additional_flags=-DSHLIB_NAME=\"$dlopen_lib\"]
    if {[build_executable "build $libname" $libname $srclib $opts] == -1} {
	untested "failed to compile $dso_basename.so"
	return false
    }

    # Compile main program.
    set binfile [standard_output_file $testfile-shared]
    set opts [list debug shlib=$objlib additional_flags=-DTEST_SHARED]
    if {[build_executable "build [file tail $binfile]" $binfile \
	     $srcfile $opts] == -1} {
	untested "failed to compile $dso_basename.so"
	return false
    }

    # Move objects to non-default path.
    remote_exec build "rm -rf $builddir"
    remote_exec build "mkdir $builddir"
    remote_exec build "mv $binfile $builddir"
    remote_exec build "mv $objdso  $builddir"
    remote_exec build "mv $objlib $builddir"

    return true
}

# Append DEBUGDIR to the debug-file-directory path.

proc append_debug_dir {debugdir} {
    global gdb_prompt

    set orig_debugdir {}
    gdb_test_multiple "show debug-file-directory" \
	"get debug-file-directory" {
	    -re "The directory where separate debug symbols are searched for is \"(.*)\"\.\[\r\n\]+$gdb_prompt $" {
		set orig_debugdir $expect_out(1,string)
		pass "get debug-file-directory"
	    }
	}
    gdb_test_no_output "set debug-file-directory $debugdir:$orig_debugdir" \
	"append debug directory"
}

# A convenience procedure to check if "info files" mentions the exec file
# FILE.

proc check_exec_file {file} {
    global gdb_prompt
    send_log "expecting exec file \"$file\"\n"

    # Get line with "Local exec file:".
    set ok 0
    gdb_test_multiple "info files" "" -lbl {
	-re "\r\nLocal exec file:" {
	    set test_name $gdb_test_name
	    set ok 1
	}
    }

    if { $ok == 0 } {
	return
    }

    # Get subsequent line with $file.
    set ok 0
    gdb_test_multiple "" $test_name -lbl {
	-re "\r\n\[\t\ \]+`[string_to_regexp $file]'\[^\r\n\]*" {
	    set ok 1
	}
    }

    if { $ok == 0 } {
	return
    }

    # Skip till prompt.
    gdb_test_multiple "" $test_name -lbl {
	-re "\r\n$gdb_prompt $" {
	    pass $gdb_test_name
	}
    }
}

# Test whether gdb can find an exec file from a core file's build-id.
#
# The executable (and separate debuginfo if SEPDEBUG is true) is copied to
# the .build-id directory.
#
# COREFILE is the filename of the core file.
#
# BUILDID is the build-id we expect GDB to use to look for the executable,
# and also the debug information if SEPDEBUG is true.
#
# SUFFIX is a string appended to the .builid-id parent directory name to
# keep all tests separate.
#
# SEPDEBUG is a boolean, true if the debug has been split from the
# executable and should be moved or symlinked too.
#
# SYMLINK is a boolean and specifies whether build-id files should be copied
# or symlinked.
#
# BUILDDIR is the directory in which to look for BINFILE and (when SEPDEBUG
# is true) the related separate debug file.
#
# BINFILE is the filename within BUILDDIR of the executable.

proc locate_exec_from_core_build_id {corefile buildid suffix sepdebug \
					 symlink builddir binfile} {
    clean_restart

    # Set up the build-id directory and symlink the binary there.
    if {$symlink} {
	set d "symlinkdir"
    } else {
	set d "debugdir"
    }
    set debugdir [standard_output_file $d-$suffix]
    remote_exec build "rm -rf $debugdir"
    remote_exec build \
	"mkdir -p [file join $debugdir [file dirname $buildid]]"

    set files_list {}
    lappend files_list $binfile $buildid
    if {$sepdebug} {
	lappend files_list "$binfile.debug" "$buildid.debug"
    }

    foreach {target name} $files_list {
	set t [file join $builddir [file tail $target]]
	if {$symlink} {
	    remote_exec build "ln -s $t [file join $debugdir $name]"
	} else {
	    remote_exec build "cp $t [file join $debugdir $name]"
	}
    }

    # Append the debugdir to the separate debug directory search path.
    append_debug_dir $debugdir

    gdb_test "core-file $corefile" "Program terminated with .*" \
	"load core file"
    if {$symlink} {
	set expected_file [file join $builddir [file tail $binfile]]
    } else {
	set expected_file $buildid
    }
    check_exec_file [file join $debugdir $expected_file]
}

# Run a build-id tests on a core file.
#
# Supported options: "-shared" and "-sepdebug" for running tests of shared
# and/or stripped/.debug executables.  "-mode MODE" where MODE can be any
# string; used for creating unique locations for the debug information.
# "-execdir NAME" is the name of the directory, within the standard output
# directory where the binaries, and possibly the stripped debug, can be
# found. "-binfile NAME" is the name of the executable within EXECDIR.  This
# is also used as the foundation for the name of the separate debug file.

proc do_corefile_buildid_tests {args} {
    global testfile srcfile hex

    # Parse options.
    parse_args [list {sepdebug} {shared} {mode ""} {execdir ""} {binfile ""}]

    # PROGRAM to run to generate core file.  This could be different
    # than the program that was originally built, e.g., for a stripped
    # executable.
    set execdir [standard_output_file $execdir]
    set program_to_run [file join $execdir [file tail $binfile]]

    # A list of suffixes to use to describe the test and the .build-id
    # directory for the test.  The suffix will be used, joined with spaces,
    # to prefix all tests for the given run.  It will be used, joined with
    # dashes, to create a unique build-id directory.
    set suffix [list $mode]
    if {$shared} {
	lappend suffix "shared"
    } else {
	lappend suffix "exec"
    }

    if {$sepdebug} {
	# Strip debuginfo into its own file.
	if {[gdb_gnu_strip_debug [standard_output_file $program_to_run] \
		 no-debuglink] != 0} {
	    untested "could not strip executable  for [join $suffix \ ]"
	    return
	}

	lappend suffix "sepdebug"
    }

    with_test_prefix "[join $suffix \ ]" {
	# Find the core file.
	set corefile [core_find $program_to_run]
	if {$corefile == ""} {
	    untested "could not generate core file"
	    return
	}
	verbose -log "corefile is $corefile"

	if { [catch "exec [gdb_find_eu-unstrip] -n --core $corefile" output] == 0 } {
	    set line [lindex [split $output "\n"] 0]
	    set binfile_re (?:[string_to_regexp $program_to_run]|\\\[(?:exe|pie)\\\])
	    if { ![regexp "^${hex}\\+${hex} \[a-f0-9\]+@${hex}.*$binfile_re$" $line] } {
		unsupported "build id for exec"
		return
	    }
	} else {
	    unsupported "eu-unstrip execution"
	    return
	}

	# Get the build-id filename without ".debug" on the end.  This
	# will have the format: '.build-id/xx/xxxxx'
	set buildid [build_id_debug_filename_get $program_to_run ""]
	if {$buildid == ""} {
	    untested "binary has no build-id"
	    return
	}
	verbose -log "build-id is $buildid"

	locate_exec_from_core_build_id $corefile $buildid \
	    [join $suffix -] $sepdebug false $execdir $binfile

	with_test_prefix "symlink" {
	    locate_exec_from_core_build_id $corefile $buildid \
		[join $suffix -] $sepdebug true $execdir $binfile
	}
    }
}

#
# Do tests
#

foreach_with_prefix mode {standard rosegment} {
    set extra_opts {}
    if { $mode eq "standard" } {
	# In "standard" mode we make the assumption that if the flag to
	# activate a feature is available, the inverse flag to disable the
	# feature will also be available.
	if { [linker_supports_z_separate_code_flag] } {
	    lappend extra_opts "ldflags=-Wl,-z,noseparate-code"
	}
	if { [linker_supports_rosegment_flag] } {
	    lappend extra_opts "ldflags=-Wl,--no-rosegment"
	}
    } elseif { $mode eq "rosegment" } {
	if { [linker_supports_z_separate_code_flag] } {
	    lappend extra_opts "ldflags=-Wl,-z,separate-code"
	}
	if { [linker_supports_rosegment_flag] } {
	    lappend extra_opts "ldflags=-Wl,--rosegment"
	}
    }

    set execdir "build-$mode-exec"
    build_corefile_buildid_exec $execdir $extra_opts
    do_corefile_buildid_tests -execdir $execdir -mode $mode -binfile $testfile
    do_corefile_buildid_tests -execdir $execdir -mode $mode -binfile $testfile -sepdebug

    if {[allow_shlib_tests]} {
	set execdir "build-$mode-shared"
	build_corefile_buildid_shared $execdir $extra_opts
	do_corefile_buildid_tests -execdir $execdir -mode $mode -shared -binfile "${testfile}-shared"
	do_corefile_buildid_tests -execdir $execdir -mode $mode -shared -binfile "${testfile}-shared" -sepdebug
    }
}
