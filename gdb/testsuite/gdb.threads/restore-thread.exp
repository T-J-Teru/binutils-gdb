# This testcase is part of GDB, the GNU debugger.
#
# Copyright 2020 Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Test GDB's ability to restore the selected thread when switching
# between inferiors, and check what happens when the selected thread
# of one inferior exits while we have a different inferior selected.

standard_testfile

if [prepare_for_testing "failed to prepare" $binfile $srcfile \
	{debug pthreads}] {
    return -1
}

# Check that the current thread is THR in inferior INF.
proc check_current_thread { inf thr {testname ""} } {
    if {${testname} == ""} {
	set testname "check_current_thread ${inf} ${thr}"
    }

    # As a final check, lets check the output for the 'thread'
    # command.
    gdb_test "thread" "Current thread is ${inf}.${thr} .*" \
	"current thread is ${inf}.${thr}: $testname"
}

# Switch to inferior number INF, we expect that thread number THR
# within the inferior will be selected.
proc switch_to_inferior { inf thr {testname ""} } {
    if {${testname} == ""} {
	set testname "switch_to_inferior $inf $thr"
    }

    gdb_test "inferior $inf" \
	"Switching to inferior ${inf} .*Switching to thread ${inf}.${thr} .*" \
	"$testname: select inferior ${inf}"

    check_current_thread $inf $thr "$testname: check current thread"
}

# Switch to thread number THR.  INF should be the number of the
# currently selected inferior and is used when checking the currently
# selected thread.
proc switch_to_thread { inf thr {testname ""} } {
    if {${testname} == ""} {
	set testname "switch_to_thread $inf $thr"
    }

    gdb_test "thread ${thr}" \
	"Switching to thread ${inf}.${thr} .*" \
	"${testname}: select thread ${thr}"
    check_current_thread $inf $thr \
	"${testname}: check current thread"
}

# Continue the program in the background.
proc continue_in_bg { testname } {
    global gdb_prompt

    gdb_test_multiple "continue&" $testname {
	-re "Continuing\\.\r\n$gdb_prompt " {
	    pass $gdb_test_name
	}
    }
}

# Send SIGUSR1 to PID, this will cause one of that processes threads
# to exit (assuming the process is currently running).
proc send_thread_exit_signal { pid } {
    global decimal

    remote_exec target "kill -USR1 ${pid}"
    gdb_test_multiple "" "wait for thread to exit" {
	-re "Thread $decimal exited.*exited\\\].*" {
	}
    }
}

# Start of test script.

set pid_1 0
set pid_2 0

if ![runto_main] {
    return -1
}

gdb_breakpoint "breakpt_0"
gdb_breakpoint "breakpt_1"

with_test_prefix "start inferior 1" {
    gdb_continue_to_breakpoint "created thread 1.2" ".* breakpt_0 .*"
    gdb_continue_to_breakpoint "created thread 1.3" ".* breakpt_0 .*"
    gdb_continue_to_breakpoint "created thread 1.4" ".* breakpt_0 .*"
    gdb_continue_to_breakpoint "all inferior 1 threads created" \
	".* breakpt_1 .*"
    gdb_test "info threads" ".*"
    set pid_1 [get_valueof "/d" "global_pid" 0]
}

# Start another inferior.
gdb_test "add-inferior" [multi_line \
			     "\\\[New inferior 2\\\]" \
			     "Added inferior 2 .*" ] \
    "add empty inferior 2"
gdb_test "inferior 2" "Switching to inferior 2.*" \
    "switch to inferior 2"
gdb_test "file ${binfile}" ".*" "load file in inferior 2"

with_test_prefix "start inferior 2" {
    gdb_breakpoint "breakpt_2"
    gdb_run_cmd
    gdb_test "" "hit Breakpoint .*" \
	"runto breakpoint in main"
    gdb_continue_to_breakpoint "created thread 2.2" ".* breakpt_0 .*"
    gdb_continue_to_breakpoint "created thread 2.3" ".* breakpt_0 .*"
    gdb_continue_to_breakpoint "created thread 2.4" ".* breakpt_0 .*"
    gdb_continue_to_breakpoint "all inferior 2 threads created" \
	".* breakpt_2 .*"
    gdb_test "info threads" ".*"
    set pid_2 [get_valueof "/d" "global_pid" 0]
}

gdb_assert {${pid_1} != 0} "read the pid for inferior 1"
gdb_assert {${pid_2} != 0} "read the pid for inferior 2"

check_current_thread 2 3 "check initial thread is 2.3"
switch_to_inferior 1 1 "first switch to thread 1.1"
switch_to_inferior 2 3
switch_to_thread 2 2

switch_to_inferior 1 1 "second switch to thread 1.1"
switch_to_thread 1 3
switch_to_inferior 2 2

# Inferior 2 is special; it will have stopped at breakpt_2, in thread
# 2.3.  To set this inferior up so that threads can exit we need to
# continue to breakpt_1.
gdb_continue_to_breakpoint "all inferior 2 threads created" \
    ".* breakpt_1 .*"

with_test_prefix "inferior 2 ready" {
    check_current_thread 2 1

    switch_to_inferior 1 3
    switch_to_thread 1 2

    continue_in_bg "continue inferior 1"
    switch_to_inferior 2 1
    switch_to_thread 2 2
    continue_in_bg "continue inferior 2"
}

# Cause thread 1.2 to exit.
send_thread_exit_signal ${pid_1}

with_test_prefix "after 1.2 exited" {
    # We should go back to 1.1 now as 1.2 has exited.
    switch_to_inferior 1 1
    switch_to_thread 1 4

    # Cause thread 2.2 to exit.
    send_thread_exit_signal ${pid_2}
}

with_test_prefix "after 2.2 exited" {
    # We should go back to 2.1 now as 2.2 has exited.
    switch_to_inferior 2 1

    # Cause thread 1.3 to exit.
    send_thread_exit_signal ${pid_1}
}

with_test_prefix "after 1.3 exited" {
    # We should still switch back to 1.4 as only 1.3 exited.
    switch_to_inferior 1 4

    # Cause thread 2.3 to exit.
    send_thread_exit_signal ${pid_2}
}

with_test_prefix "after 2.3 exited" {
    # Switch back to 2.1, which should still be selected.
    switch_to_inferior 2 1

    # Cause thread 1.4 to exit.
    send_thread_exit_signal ${pid_1}
}

with_test_prefix "after 1.4 exited" {
    # We should now switch back to 1.1 as 1.4 exited, and 1.1 is the
    # only thread left now.
    switch_to_inferior 1 1

    # Cause thread 2.4 to exit.
    send_thread_exit_signal ${pid_2}
}

with_test_prefix "after 2.4 exited" {
    # Switch back to 2.1, which should still be selected.
    switch_to_inferior 2 1
}

